COMPARACION Y ANALISIS DEL DESEMPEÑO EN EL CALCULO FACTORIAL EN C

1.Introduccion: El factorial es una operación matemática súper común en programación, especialmente en combinatoria y probabilidad. En este trabajo, 
comparamos dos formas de calcularlo en C:una iterativa y otra recursiva. La idea es ver cuál es más eficiente en términos de tiempo y memoria.
Además, analizamos cómo se podría mejorar el cálculo del factorial usando el paradigma funcional, que tiene características interesantes como funciones 
puras, recursión de cola y evaluación perezosa.

2.Comparacion de desempeño
  -tiempo de ejecucion 
    La versión iterativa es más rápida porque solo usa un bucle.
    La versión recursiva puede ser más lenta debido a la sobrecarga de las llamadas a función.
3.Comparacion de uso de memoria
    La versión recursiva necesita más memoria porque cada llamada crea un nuevo marco en la pila.  
    La iterativa usa solo una variable acumuladora, lo que la hace más eficiente.
4.Como se podria optimizar el programa?
    -Funciones puras: Hacer que la función no dependa de variables externas. Esto hace que el código sea más predecible.
    -Recursión de cola: Si la recursión se escribe bien, se puede optimizar para que no llene la pila (aunque C no tiene optimización de cola como otros lenguajes).
    -Reducción (fold): En lenguajes funcionales como Haskell, podríamos hacer algo como foldl (*) 1 [1..n].
    -Evaluación perezosa: Se puede generar solo lo que se necesita, sin calcular de más. Esto ayuda a ahorrar memoria.
    -Inmutabilidad: Evitar modificar variables hace que el código sea más seguro y fácil de optimizar.
